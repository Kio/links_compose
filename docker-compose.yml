version: "3.9"
services:
  frontend:
    build:
      context: frontend
      dockerfile: Dockerfile
    volumes:
      - ./frontend:/app:delegated
      - ./frontend/node_modules:/node_modules
    ports:
      - 3000:3000
    environment:
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
    healthcheck:
      test: curl --fail http://localhost:3000 || exit 1
      interval: 60s
      retries: 5
      start_period: 20s
      timeout: 10s
  backend:
    build:
      context: backend
      dockerfile: Dockerfile
    volumes:
      - ./backend:/app:delegated
    ports:
      - 8000:8000
    depends_on:
      db:
        condition: service_healthy
      mq:
        condition: service_healthy
    env_file:
      - .env
    healthcheck:
      test: curl --fail http://localhost:8000 || exit 1
      interval: 60s
      retries: 5
      start_period: 20s
      timeout: 10s
  db:
    image: postgres:15
    volumes:
      - ./data/db:/var/lib/postgresql/data
    env_file:
      - .env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 10
    restart: always
  mq:
    image: rabbitmq:3.11
    volumes:
      - './data/mq:/var/lib/rabbitmq/mnesia/'
    ports:
      - '5672:5672'
      - '15672:15672'
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3